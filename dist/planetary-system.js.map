{"version":3,"sources":["webpack://PlanetarySystem/webpack/universalModuleDefinition","webpack://PlanetarySystem/webpack/bootstrap","webpack://PlanetarySystem/webpack/runtime/define property getters","webpack://PlanetarySystem/webpack/runtime/hasOwnProperty shorthand","webpack://PlanetarySystem/./src/utils.js","webpack://PlanetarySystem/./src/objects/sun.js","webpack://PlanetarySystem/./src/objects/moon-orbit.js","webpack://PlanetarySystem/./src/objects/moon.js","webpack://PlanetarySystem/./src/objects/planet.js","webpack://PlanetarySystem/./src/objects/planet-orbit.js","webpack://PlanetarySystem/./src/scene/scene.js","webpack://PlanetarySystem/./src/scene/wheel.js","webpack://PlanetarySystem/./src/scene/drag.js","webpack://PlanetarySystem/./src/scene/resize.js","webpack://PlanetarySystem/./src/index.js"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","className","size","$node","document","createElement","style","width","height","src","$img","label","$label","textContent","perspective","angle","a","Math","PI","cos","sin","Sun","options","this","system","sizes","sun","distance","image","scale","$image","appendChild","$items","translate","gsap","to","duration","durations","sqrt","canvas","paused","ease","Power1","easeInOut","onUpdate","setTransform","addEventListener","emit","on","play","reverse","transform","x","y","camera","MoonOrbit","normalOrbitSizes","moon","planet","opacity","orbit","index","$orbits","fade","setOpacity","moonOrbit","setSize","resize","activeOrbitSizes","_resize","kill","Moon","moons","length","note","spin","speed","repeat","Power0","easeNone","onStart","onReverseComplete","pause","active","classList","add","remove","value","timeScale","includes","move","resume","_move","Planet","planets","map","Orbit","random","setStyle","Scene","scene","minScale","maxScale","zoom","padding","drag","getEvent","event","touches","changedTouches","start","e","clientX","clientY","sceneX","sceneY","render","preventDefault","end","passive","deltaY","delta","origin","zoomTo","getComputedStyle","top","parseFloat","getPropertyValue","right","bottom","left","freeWidth","offsetWidth","freeHeight","offsetHeight","sceneWidth","$scene","sceneHeight","min","window","pow","getBoundingClientRect","x0","y0","max","PlanetarySystem","listeners","setCamera","getOrbitSizes","maxOrbit","orbits","minSunDist","Array","from","i","handler","push","indexOf","splice","param","forEach"],"mappings":"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","file":"planetary-system.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"PlanetarySystem\"] = factory();\n\telse\n\t\troot[\"PlanetarySystem\"] = factory();\n})(self, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","export default {\n\n    createNode (className, size) {\n        const $node = document.createElement('div');\n        $node.className = className;\n        if (size) $node.style.width = $node.style.height = size + 'px';\n        return $node;\n    },\n\n    createImage (src) {\n        const $img = document.createElement('img');\n        $img.src = src;\n        return $img;\n    },\n\n    createLabel (label) {\n        const $label = document.createElement('p');\n        $label.textContent = label;\n        return $label;\n    },\n\n    getSceneHeight (size, { perspective, angle }) {\n        const a = angle * Math.PI / 180;\n        const y = size / 2 * Math.cos(a); // size/2 - sun in the center\n        const z = size / 2 * Math.sin(a);\n        const h = size / 2 + (y - size / 2) * perspective / (perspective + z);\n        return h * 2;\n    }\n    \n}","import Utils from '@/utils'\n\nexport default class Sun {\n\n\n\n    // ----------------------\n    // Constructor\n    // ----------------------\n\n    constructor (options) {\n\n\n        // options\n\n        this.size = options.size || options.system.options.sizes.sun;\n        this.angle = options.angle || 0;\n        this.distance = options.distance || 0;\n        this.system = options.system;\n        this.image = options.image;\n        this.scale = options.scale || 1;\n\n\n        // create nodes\n\n        this.$node = Utils.createNode('ps-item ps-sun', this.size);\n        this.$image = Utils.createImage(this.image);\n        this.$node.appendChild(this.$image);\n        this.system.$items.appendChild(this.$node);\n\n\n        // translate animation\n\n        this.translate = gsap.to(this, {\n            duration: this.system.options.durations.translate,\n            distance: Math.sqrt(2) * (this.system.options.sizes.canvas - this.size) / 2,\n            paused: true,\n            ease: Power1.easeInOut,\n            onUpdate: () => {\n                this.setTransform();\n            }\n        })\n\n\n        // DOM listeners\n\n        this.$node.addEventListener('click', () => {\n            this.system.emit('deactivate');\n        })\n\n\n        // event listeners\n\n        this.system.on('activate', () => {\n            this.translate.play();\n        });\n\n        this.system.on('deactivate', () => {\n            this.translate.reverse();\n        });\n\n\n        // render\n\n        this.setTransform();\n        this.system.on('camera', () => this.setTransform());\n\n    }\n\n\n\n    // ----------------------\n    // Style setters\n    // ----------------------\n\n    get x () {\n        return this.distance * Math.cos(this.angle * Math.PI / 180);\n    }\n\n    get y () {\n        return this.distance * Math.sin(this.angle * Math.PI / 180)\n    }\n\n    setTransform () {\n        this.$node.style.transform = `translate(${this.x - this.size / 2}px, ${this.y - this.size / 2}px) rotateX(-${this.system.camera.angle}deg) scale(${this.scale})`\n    }\n\n\n\n}","import Utils from '@/utils'\n\nexport default class MoonOrbit {\n\n\n\n    // ----------------------\n    // Constructor\n    // ----------------------\n\n    constructor (options) {\n\n\n        // options\n\n        this.size = options.system.normalOrbitSizes.moon;\n        this.planet = options.planet;\n        this.system = options.system;\n        this.opacity = 0;\n        this.angle = this.planet.angle;\n\n\n        // create node\n\n        this.$node = Utils.createNode(`ps-orbit ps-orbit-${this.planet.orbit.index} ps-planet-${this.planet.index} ps-moon-orbit`, this.size);\n        this.system.$orbits.appendChild(this.$node);\n\n\n        // fade animation\n\n        this.fade = gsap.to(this, {\n            duration: this.system.options.durations.fade,\n            opacity: 1,\n            paused: true,\n            ease: Power1.easeInOut,\n            onUpdate: () => {\n                this.setTransform();\n                this.setOpacity();\n            }\n        })\n\n\n        // event listeners\n\n        this.system.on('enter', planet => {\n            if (planet.moonOrbit !== this) return;\n            this.setSize();\n            this.setTransform();\n            this.fade.play();\n        })\n\n        this.system.on('leave', planet => {\n            if (planet.moonOrbit !== this) return;\n            this.fade.reverse();\n        })\n\n        this.system.on('activate', planet => {\n            if (planet.moonOrbit === this) this.resize(this.system.activeOrbitSizes[0]);\n            else {\n                this.resize(this.system.activeOrbitSizes.moon);\n                this.fade.reverse();\n            }\n        })\n\n        this.system.on('deactivate', () => {\n            this.resize(this.system.normalOrbitSizes.moon);\n            this.fade.reverse();\n        })\n\n\n        // render\n\n        this.setOpacity();\n\n    }\n\n\n\n    // ----------------------\n    // Helpers\n    // ----------------------\n\n    resize (size) {\n        this._resize && this._resize.kill();\n        this._resize = gsap.to(this, {\n            duration: this.system.options.durations.translate,\n            size,\n            ease: Power1.easeInOut,\n            onUpdate: () => {\n                if (!this.opacity) return;\n                this.setSize();\n                this.setTransform();\n            }\n        });\n    }\n\n\n\n    // ----------------------\n    // Style setters\n    // ----------------------\n\n    setOpacity () {\n        this.$node.style.opacity = this.opacity;\n    }\n\n    setSize () {\n        this.$node.style.width = this.$node.style.height = this.size + 'px';\n    }\n\n    setTransform () {\n        this.$node.style.transform = `translate(${this.planet.x - this.size / 2}px, ${this.planet.y - this.size / 2}px)`\n    }\n\n}","import Utils from '@/utils'\n\nexport default class Moon {\n\n\n\n    // ----------------------\n    // Constructor\n    // ----------------------\n\n    constructor(options) {\n\n\n        // options\n\n        this.index = options.index;\n        this.planet = options.planet;\n        this.system = options.system;\n\n        this.size = options.size || options.system.options.sizes.moon;\n        this.scale = options.scale || 1;\n        this.angle = options.index * 360 / options.planet.moons.length;\n        this.distance = options.system.normalOrbitSizes.moon / 2;\n        this.opacity = 0;\n\n        this.image = options.image;\n        this.label = options.label;\n        this.note = options.note;\n\n\n        // create nodes\n\n        this.$node = Utils.createNode(`ps-item ps-ring-${this.planet.orbit.index} ps-planet-${this.planet.index} ps-moon-${this.index} ps-moon`, this.size);\n        this.$image = Utils.createImage(this.image);\n        this.$label = Utils.createLabel(this.label);\n        this.$node.appendChild(this.$image);\n        this.$node.appendChild(this.$label);\n        this.system.$items.appendChild(this.$node);\n\n\n        // spin animation\n\n        this.spin = gsap.to(this, {\n            duration: 2 * Math.PI * this.distance * this.system.options.speed,\n            angle: this.angle + 360,\n            repeat: -1,\n            paused: true,\n            ease: Power0.easeNone,\n            onUpdate: () => {\n                this.setTransform();\n            }\n        });\n\n\n        // fade animation\n\n        this.fade = gsap.to(this, {\n            opacity: 1,\n            duration: this.system.options.durations.fade,\n            paused: true,\n            ease: Power1.easeInOut,\n            onStart: () => {\n                if (!this.system.paused) this.spin.play();\n                else this.setTransform();\n            },\n            onUpdate: () => {\n                this.setOpacity();\n            },\n            onReverseComplete: () => {\n                this.spin.pause();\n            }\n        })\n\n\n        // DOM listeners\n\n        this.$node.addEventListener('mouseenter', () => {\n            if (!this.planet.active) return;\n            this.$node.classList.add('hovered');\n            this.system.emit('moon:enter', this);\n        })\n\n        this.$node.addEventListener('mouseleave', () => {\n            if (!this.planet.active) return;\n            this.$node.classList.remove('hovered');\n            this.system.emit('moon:leave', this);\n        })\n\n        this.$node.addEventListener('click', () => {\n            if (!this.planet.active) return;\n            this.system.emit('click', this);\n        })\n\n\n        // event listeners\n\n        this.system.on('pause', () => {\n            this.spin.pause();\n        })\n\n        this.system.on('resume', () => {\n            this.spin.play();\n        })\n\n        this.system.on('timescale', value => {\n            this.spin.timeScale(value);\n        })\n\n        this.system.on('enter', planet => {\n            if (planet.moons.includes(this)) this.fade.play();\n        })\n\n        this.system.on('leave', planet => {\n            if (planet.moons.includes(this)) this.fade.reverse();\n        })\n\n        this.system.on('activate', planet => {\n            if (planet.moons.includes(this)) {\n                this.move(this.system.activeOrbitSizes[0] / 2, this.system.options.sizes.planet / this.size);\n            }\n            else {\n                this.move(this.system.activeOrbitSizes.moon / 2, 1);\n                this.fade.reverse();\n            }\n        })\n\n        this.system.on('deactivate', () => {\n            this.move(this.system.normalOrbitSizes.moon / 2, 1);\n            this.fade.reverse();\n        })\n\n        this.system.on('moon:enter', moon => {\n            if (!moon.planet.moons.includes(this)) return;\n            if (!this.system.paused) this.spin.pause();\n        });\n\n        this.system.on('moon:leave', moon => {\n            if (!moon.planet.moons.includes(this)) return;\n            if (!this.system.paused) this.spin.resume();\n        });\n\n        this.system.on('camera', () => {\n            if (this.system.paused) this.setTransform();\n        });\n\n\n        // render\n\n        this.setOpacity();\n        this.setTransform();\n\n    }\n\n\n    // ----------------------\n    // Helpers\n    // ----------------------\n\n    move (distance, scale) {\n        this._move && this._move.kill();\n        this._move = gsap.to(this, {\n            duration: this.system.options.durations.translate,\n            distance,\n            scale,\n            ease: Power1.easeInOut,\n            onUpdate: () => {\n                if (!this.opacity) return;\n                this.setTransform();\n            }\n        });\n    }\n\n\n\n    // ----------------------\n    // Styles setters\n    // ----------------------\n\n    setOpacity () {\n        this.$node.style.opacity = this.opacity;\n    }\n\n    get x () {\n        return this.planet.x + this.distance * Math.cos(this.angle * Math.PI / 180);\n    }\n\n    get y () {\n        return this.planet.y + this.distance * Math.sin(this.angle * Math.PI / 180)\n    }\n\n    setTransform () {\n        this.$node.style.transform = `translate3d(${this.x - this.size / 2}px, ${this.y - this.size / 2}px, 0) rotateX(-${this.system.camera.angle}deg) scale(${this.scale})`\n    }\n\n}","import Utils from '@/utils'\nimport MoonOrbit from '@/objects/moon-orbit'\nimport Moon from '@/objects/moon'\n\nexport default class Planet {\n\n\n\n    // ----------------------\n    // Constructor\n    // ----------------------\n\n    constructor (options) {\n\n\n        // options\n\n        this.index = options.index;\n        this.orbit = options.orbit;\n        this.system = options.system;\n        this.moons = options.moons || [];\n\n        this.size = options.size || options.system.options.sizes.planet;\n        this.scale = options.scale || 1;\n        this.angle = options.orbit.angle + this.index * 360 / options.orbit.planets.length;\n        this.distance = options.orbit.size / 2;\n\n        this.image = options.image;\n        this.label = options.label;\n        this.note = options.note;\n\n        this.active = false;\n\n\n        // create moon orbit\n\n        this.moonOrbit = new MoonOrbit({\n            planet: this,\n            system: this.system\n        })\n\n\n        // create moons\n\n        this.moons = this.moons.map((options, index) => {\n            return new Moon({\n                ...options,\n                index,\n                planet: this,\n                system: this.system\n            })\n        })\n\n\n        // create nodes\n\n        this.$node = Utils.createNode(`ps-item ps-planet ps-planet-${this.index} ps-orbit-${this.orbit.index}`, this.size);\n        this.$image = Utils.createImage(this.image);\n        this.$label = Utils.createLabel(this.label);\n        this.$node.appendChild(this.$image);\n        this.$node.appendChild(this.$label);\n        this.system.$items.appendChild(this.$node);\n\n\n        // spin animations\n\n        this.spin = gsap.to(this, {\n            duration: 2 * Math.PI * this.distance * this.system.options.speed,\n            angle: this.angle + 360,\n            repeat: -1,\n            ease: Power0.easeNone,\n            onUpdate: () => {\n                this.setTransform();\n            }\n        });\n\n\n        // DOM listeners\n\n        this.$node.addEventListener('mouseenter', () => {\n            if (this.active) return;\n            this.$node.classList.add('hovered');\n            this.system.emit('enter', this);\n        })\n\n        this.$node.addEventListener('mouseleave', () => {\n            this.$node.classList.remove('hovered');\n            if (this.active) return;\n            this.system.emit('leave', this);\n        })\n\n        this.$node.addEventListener('click', () => {\n            if (this.active) this.system.emit('click', this);\n            else this.system.emit('activate', this);\n        })\n\n\n        // event listeners\n\n        this.system.on('pause', () => {\n            this.spin.pause();\n        })\n\n        this.system.on('resume', () => {\n            this.spin.play();\n        })\n\n        this.system.on('timescale', value => {\n            this.spin.timeScale(value);\n        })\n\n        this.system.on('enter', planet => {\n            if (planet.orbit !== this.orbit) return;\n            if (!this.system.paused) this.spin.pause();\n        })\n\n        this.system.on('leave', planet => {\n            if (planet.orbit !== this.orbit) return;\n            if (!this.system.paused) this.spin.resume();\n        })\n\n        this.system.on('activate', planet => {\n            if (planet === this) {\n                this.active = true;\n                this.$node.classList.add('active');\n                this.move(0, this.system.options.sizes.sun / this.size);\n            }\n            else {\n                this.active = false;\n                this.$node.classList.remove('active');\n                this.move(this.system.activeOrbitSizes[this.orbit.index + 1] / 2, 1);\n            }\n        })\n\n        this.system.on('deactivate', () => {\n            this.active = false;\n            this.move(this.system.normalOrbitSizes[this.orbit.index] / 2, 1);\n            if (!this.system.paused) this.spin.resume();\n        });\n\n        this.system.on('camera', () => {\n            if (this.system.paused) this.setTransform();\n        });\n\n        \n    }\n\n\n\n    // ----------------------\n    // Helpers\n    // ----------------------\n\n    move (distance, scale) {\n        this._move && this._move.kill();\n        this._move = gsap.to(this, {\n            duration: this.system.options.durations.translate,\n            distance,\n            scale,\n            ease: Power1.easeInOut,\n            onUpdate: () => {\n                this.setTransform();\n            }\n        });\n    }\n\n\n\n    // ----------------------\n    // Styles setters\n    // ----------------------\n\n    get x () {\n        return this.distance * Math.cos(this.angle * Math.PI / 180);\n    }\n\n    get y () {\n        return this.distance * Math.sin(this.angle * Math.PI / 180)\n    }\n\n    setTransform () {\n        this.$node.style.transform = `translate3d(${this.x - this.size / 2}px, ${this.y - this.size / 2}px, 0) rotateX(-${this.system.camera.angle}deg) scale(${this.scale})`\n    }\n\n\n}\n\n","import Utils from '@/utils'\nimport Planet from '@/objects/planet'\n\nexport default class Orbit {\n\n\n\n    // ----------------------\n    // Constructor\n    // ----------------------\n\n    constructor (options) {\n\n\n        // options\n\n        this.index = options.index;\n        this.size = options.system.normalOrbitSizes[this.index];\n        this.angle = options.angle || Math.random() * 360;\n        this.planets = options.planets || [];\n        this.system = options.system;\n\n\n        // create node\n\n        this.$node = Utils.createNode(`ps-orbit ps-orbit-${this.index} ps-planet-orbit`, this.size);\n        this.system.$orbits.appendChild(this.$node);\n\n\n        // create planets\n\n        this.planets = this.planets.map((options, index) => new Planet({\n            ...options,\n            index,\n            orbit: this,\n            system: this.system\n        }))\n\n\n        // resize animation\n\n        this.resize = gsap.to(this, {\n            size: this.system.activeOrbitSizes[this.index + 1],\n            duration: this.system.options.durations.translate,\n            paused: true,\n            ease: Power1.easeInOut,\n            onUpdate: () => {\n                this.setStyle();\n            }\n        })\n\n\n        // event listeners\n\n        this.system.on('activate', () => {\n            this.resize.play()\n        })\n\n        this.system.on('deactivate', () => {\n            this.resize.reverse()\n        })\n\n\n        // render\n\n        this.setStyle();\n\n    }\n\n\n\n    // ----------------------\n    // Style setters\n    // ----------------------\n\n    setStyle () {\n        this.$node.style.width = this.$node.style.height = this.size + 'px';\n        this.$node.style.transform = `translate(-${this.size / 2}px, -${this.size / 2}px)`\n    }\n\n\n}","import drag from './drag'\nimport wheel from './wheel'\nimport resize from './resize'\n\nexport default class Scene {\n\n\n\n    // ----------------------\n    // Constructor\n    // ----------------------\n\n    constructor (system) {\n\n        this.x = 0;\n        this.y = 0;\n        this.minScale = 0;\n        this.maxScale = 0;\n        this.zoom = 0;\n        this.system = system;\n        this.padding = {};\n\n        drag(this);\n        wheel(this);\n        resize(this);\n\n    }\n\n\n\n    // ----------------------\n    // Getters\n    // ----------------------\n\n    get scale () {\n        return this.minScale * Math.pow(this.maxScale / this.minScale, this.zoom);\n    }\n\n\n\n    // ----------------------\n    // Zoom into point\n    // ----------------------\n\n    zoomTo (origin, zoom) {\n\n        const { left, top } = this.system.$node.getBoundingClientRect();\n\n        const x = origin.x - left - this.padding.left;\n        const y = origin.y - top - this.padding.top;\n\n        const x0 = (x - this.x) / this.scale;\n        const y0 = (y - this.y) / this.scale;\n\n        zoom = Math.max(zoom, 0);\n        zoom = Math.min(zoom, 1);\n\n        this.zoom = zoom;\n        this.x = x - x0 * this.scale;\n        this.y = y - y0 * this.scale;\n\n        this.render();\n        this.system.emit('zoom', this.zoom)\n    }\n\n\n    // ----------------------\n    // Methods\n    // ----------------------\n\n    render () {\n        this.system.$scene.style.transform = `translate(${this.x}px, ${this.y}px) scale(${this.scale})`;\n    }\n\n}","export default function (scene) {\n\n    scene.system.$node.addEventListener('wheel', event => {\n\n        event.preventDefault();\n\n        if (event.deltaY > 0 && scene.zoom === 0) return;\n        if (event.deltaY < 0 && scene.zoom === 1) return;\n\n        const delta = -event.deltaY / 1000;\n        const origin = { x: event.clientX, y: event.clientY };\n\n        scene.zoomTo(origin, scene.zoom + delta);\n\n    })\n\n}","export default function (scene) {\n\n\n\n    // ----------------------\n    // Variables\n    // ----------------------\n\n    let drag = false;\n\n\n\n    // ----------------------\n    // Helpers\n    // ----------------------\n\n    function getEvent (event) {\n        return event.touches && event.touches[0] || event.changedTouches && event.changedTouches[0] || event;\n    }\n\n\n\n    // ----------------------\n    // Handlers\n    // ----------------------\n\n    function start (event) {\n        const e = getEvent(event);\n        drag = {\n            clientX: e.clientX,\n            clientY: e.clientY,\n            sceneX: scene.x,\n            sceneY: scene.y\n        }\n    }\n\n    function move (event) {\n        if (!drag) return;\n        const e = getEvent(event);\n        scene.x = drag.sceneX + e.clientX - drag.clientX;\n        scene.y = drag.sceneY + e.clientY - drag.clientY;\n        scene.render();\n        event.preventDefault();\n    }\n\n    function end () {\n        drag = false;\n    }\n\n\n\n    // ----------------------\n    // Listeners\n    // ----------------------\n\n    scene.system.$node.addEventListener('mousedown', start);\n    document.addEventListener('mousemove', move);\n    document.addEventListener('mouseup', end);\n    document.addEventListener('mouseleave', end);\n    scene.system.$node.addEventListener('touchstart', start);\n    document.addEventListener('touchmove', move, { passive: false });\n    document.addEventListener('touchend', end);\n    document.addEventListener('touchcancel', end);\n\n\n}","export default function (scene) {\n\n\n\n    // ----------------------\n    // Handler\n    // ----------------------\n\n    function resize () {\n\n        const style = getComputedStyle(scene.system.$node);\n        scene.padding.top = parseFloat(style.getPropertyValue('padding-top'));\n        scene.padding.right = parseFloat(style.getPropertyValue('padding-right'));\n        scene.padding.bottom = parseFloat(style.getPropertyValue('padding-bottom'));\n        scene.padding.left = parseFloat(style.getPropertyValue('padding-left'));\n\n        const freeWidth = scene.system.$node.offsetWidth - scene.padding.right - scene.padding.left;\n        const freeHeight = scene.system.$node.offsetHeight - scene.padding.bottom - scene.padding.top;\n        const sceneWidth = scene.system.$scene.offsetWidth;\n        const sceneHeight = scene.system.$scene.offsetHeight;\n\n        scene.zoom = 0.4;\n        scene.minScale = Math.min(freeWidth / sceneWidth, freeHeight / sceneHeight);\n        scene.maxScale = Math.min(freeWidth, freeHeight) / 2 / scene.system.options.sizes.sun;\n\n        scene.x = (freeWidth - sceneWidth * scene.scale) / 2;\n        scene.y = (freeHeight - sceneHeight * scene.scale) / 2;\n        scene.render();\n        scene.system.emit('zoom', scene.zoom);\n\n    }\n\n\n\n    // ----------------------\n    // Listener\n    // ----------------------\n\n    resize();\n    window.addEventListener('resize', resize);\n    scene.system.on('camera', resize);\n\n\n}","import './index.css'\nimport Utils from '@/utils'\nimport Sun from '@/objects/sun'\nimport PlanetOrbit from '@/objects/planet-orbit'\nimport Scene from '@/scene/scene'\n\n\nexport default class PlanetarySystem {\n\n\n\n    // ----------------------\n    // Constructor\n    // ----------------------\n\n    constructor ($node, options) {\n\n        this.options = options;\n        this.listeners = [];\n\n\n        // create nodes\n\n        this.$node = $node;\n        this.$node.classList.add('ps-system');\n        this.$scene = Utils.createNode('ps-scene');\n        this.$orbits = Utils.createNode('ps-canvas ps-canvas--orbits');\n        this.$items = Utils.createNode('ps-canvas ps-canvas--items');\n        this.$scene.appendChild(this.$orbits);\n        this.$scene.appendChild(this.$items);\n        this.$node.appendChild(this.$scene);\n\n\n        // configuration\n\n        this.setCamera(options.camera);\n        this.normalOrbitSizes = this.getOrbitSizes(this.maxOrbit);\n        this.activeOrbitSizes = this.getOrbitSizes(this.maxOrbit + 1);\n        this.active = null;\n        this.paused = false;\n        this.timeScale = 1;\n        this.scene = new Scene(this);\n\n\n\n        // listeners\n\n        // this.on('activate', planet => this.active = planet);\n        // this.on('deactivate', () => this.active = null);\n\n\n        // create sun\n\n        this.sun = new Sun({\n            ...options.sun,\n            system: this\n        });\n\n\n        // create orbits\n\n        this.orbits = options.orbits.map((options, index) => new PlanetOrbit({\n            ...options,\n            index,\n            system: this\n        }));\n\n        // console.log(this.normalOrbitSizes);\n        // console.log(this.activeOrbitSizes);\n\n\n    }\n\n\n\n    // ----------------------\n    // Calculate orbit sizes\n    // ----------------------\n\n    getOrbitSizes (length) {\n        const { canvas, sun, moon } = this.options.sizes;\n        const minSunDist = (canvas - sun) / (length * 2 + 1);\n        let orbits = Array.from({ length }, (x, i) => sun + (i + 1) * minSunDist * 2);\n        orbits.moon = minSunDist - moon;\n        return orbits;\n    }\n    \n    get maxOrbit () {\n        return this.options.orbits.length;\n    }\n\n\n\n    // ----------------------\n    // Setting camera\n    // ----------------------\n\n    setCamera (camera) {\n        const transform = camera.angle ? `perspective(${camera.perspective}px) translateY(50%) rotateX(${camera.angle}deg) translateY(-50%)` : '';\n        this.$orbits.style.transform = this.$items.style.transform = transform;\n        this.$scene.style.width = this.options.sizes.canvas + 'px';\n        this.$scene.style.height = Utils.getSceneHeight(this.options.sizes.canvas, camera) + 'px';\n        this.camera = camera;\n        this.emit('camera', camera);\n    }\n\n\n\n    // ----------------------\n    // Events\n    // ----------------------\n\n    on (event, handler) {\n        this.listeners[event] = this.listeners[event] || [];\n        this.listeners[event].push(handler);\n    }\n\n    off (event, handler) {\n        if (!this.listeners[event]) return;\n        const index = this.listeners[event].indexOf(handler);\n        if (index > -1) this.listeners[event].splice(index, 1);\n    }\n\n    emit (event, param) {\n        if (!this.listeners[event]) return;\n        this.listeners[event].forEach(handler => handler(param));\n    }\n\n\n\n    // ----------------------\n    // Animation\n    // ----------------------\n\n    resume () {\n        this.paused = false;\n        this.emit('resume');\n    }\n\n    pause () {\n        this.paused = true;\n        this.emit('pause');\n    }\n\n    setTimeScale (timeScale) {\n        this.timeScale = timeScale;\n        this.emit('timescale', this.timeScale);\n    }\n\n\n\n}"],"sourceRoot":""}